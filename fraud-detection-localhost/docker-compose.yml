services:
  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: fraud_db
    environment:
      POSTGRES_DB: frauddb
      POSTGRES_USER: frauduser
      POSTGRES_PASSWORD: fraudpass123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fraud_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U frauduser -d frauddb"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache & Message Queue
  redis:
    image: redis:7-alpine
    container_name: fraud_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - fraud_network
    restart: unless-stopped

  # ML API Service
  ml-api:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: fraud_ml_api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://frauduser:fraudpass123@postgres:5432/frauddb
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./scripts:/app/scripts # tambahkan baris ini
      - ./sql:/app/sql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/metrics"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - fraud_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Streamlit Dashboard
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: fraud_dashboard
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://ml-api:8000
      - DATABASE_URL=postgresql://frauduser:fraudpass123@postgres:5432/frauddb
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - ml-api
    networks:
      - fraud_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  # Jupyter Lab for Development
  jupyter:
    build:
      context: ./jupyter
      dockerfile: Dockerfile
    container_name: fraud_jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=fraudtoken123
    volumes:
      - ./notebooks:/home/jovyan/work/notebooks
      - ./data:/home/jovyan/work/data
      - ./src:/home/jovyan/work/src
      - ./models:/home/jovyan/work/models
    networks:
      - fraud_network
    restart: unless-stopped

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: fraud_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - fraud_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:

networks:
  fraud_network:
    driver: bridge